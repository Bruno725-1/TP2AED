O Grande Torneio dos Matemagos

No distante e excÃªntrico Reino de BitlÃ¢ndia, onde os nÃºmeros andam de chapÃ©u e fazem festa na base dois, vivia um rei muito peculiar chamado BinÃ¡rio, o Trovejante. Esse rei tinha uma obsessÃ£o um tanto... estranha: ele nÃ£o entendia nada de nÃºmeros decimais! Para ele, sÃ³ existiam os nÃºmeros 0 e 1.

Â 
Certo dia, um jovem aprendiz chamado DÃ­gito, o Indeciso apareceu no castelo com uma missÃ£o: ele queria participar do lendÃ¡rio Torneio dos Matemagos, onde apenas aqueles que dominassem os mistÃ©rios da conversÃ£o numÃ©rica poderiam ganhar a tÃ£o cobiÃ§ada Coroa de Bits.

Â 
O rei BinÃ¡rio olhou para DÃ­gito e disse: Â 

â€” Jovem, se deseja ser um verdadeiro Matemago, terÃ¡ que provar seu valor. Aqui em BitlÃ¢ndia, nÃ£o usamos esses nÃºmeros esquisitos que vÃ£o alÃ©m de 1! Apenas verdadeiros mestres sabem converter nÃºmeros decimais para a sublime arte dos 0s e 1s! Â 

DÃ­gito, que nunca foi muito fÃ£ de contas, coÃ§ou a cabeÃ§a e tentou usar a calculadora do celular, mas um trovÃ£o estrondoso ecoou pelo castelo! Â 

â€” SEM TRAPAÃ‡AS! â€” gritou o rei. Â 

O jovem percebeu que a Ãºnica forma de resolver o problema seria usando a tÃ©cnica dos antigos mestres: a recursÃ£o sagrada. Ele pegou um pergaminho, uma pena e comeÃ§ou a escrever seu feitiÃ§o algorÃ­tmico... Â 

E agora, nobre programador, cabe a vocÃª completar a missÃ£o de DÃ­gito e impressionar o Rei BinÃ¡rio! Â 

 

Desafio Â 
VocÃª deve criar uma funÃ§Ã£o recursiva em C# que receba um nÃºmero natural N (0 â‰¤ N â‰¤ 10000) e o imprima em sua forma binÃ¡ria. Â 
â€¢ NÃ£o pode usar bibliotecas prontas de conversÃ£o (como Convert.ToString ou Convert.ToBinary). Â 
â€¢ NÃ£o pode usar formataÃ§Ã£o de strings como String.Format ou interpolaÃ§Ã£o mÃ¡gica. Â 
â€¢ Somente o poder da recursÃ£o poderÃ¡ te salvar! Â 
Agora, pegue sua varinha de programaÃ§Ã£o e que o poder dos 0s e 1s esteja com vocÃª! ğŸš€
O problema Ã© que a linguagem final serÃ¡ o C#Marromeno (kkk). Essa linguagem, recÃ©m criada, Ã© bem parecida com o C# sÃ³ que, pra economizar no compilador, ela nÃ£o tem nenhum comando de repetiÃ§Ã£o (proibido usar while, for, foreach, do-while). A Ãºnica forma de iterar em um conjunto repetitivo Ã© por recursividade.
Entrada
A primeira linha da entrada contÃ©m um inteiro N indicando quantidade de nÃºmeros a serem convertidos (0 â‰¤ N â‰¤ 10000). A seguir nas N prÃ³ximas linhas deverÃ¡ ser lido um nÃºmero natural I (0 â‰¤ I â‰¤ 100000000)
SaÃ­da
DeverÃ¡ conter N linhas com os respectivos nÃºmeros binÃ¡rios correspondentes aos nÃºmero I da entrada. NÃ£o colocar zeros Ã  esquerda dos nÃºmeros binÃ¡rios.


ATENÃ‡ÃƒO
O Verde permite a linguagem C# normal, mas o compilador final (o fessor compilando com os Ã´io) nÃ£o! NÃ£o pode usar nenhum comando repetiÃ§Ã£o. Nem pra ler os dados muito menos pra escrever. SÃ³ mÃ©todo recursivo! Para cada comando de repetiÃ§Ã£o detectado, a nota deste TP 2 inteiro serÃ¡ dividida por 2 
Entrada:
5
65535
1023
9999999
2048
12345678
SaÃ­da:
1111111111111111
1111111111
100110001001011001111111
100000000000
101111000110000101001110